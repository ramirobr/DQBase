//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace DQBase.DataAccessLayer
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(MOVIMIENTOSUBPRODUCTO))]
    public partial class HISTORICOPRECIO: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public System.Guid IDHISTORICOPRECIO
        {
            get { return _iDHISTORICOPRECIO; }
            set
            {
                if (_iDHISTORICOPRECIO != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IDHISTORICOPRECIO' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iDHISTORICOPRECIO = value;
                    OnPropertyChanged("IDHISTORICOPRECIO");
                }
            }
        }
        private System.Guid _iDHISTORICOPRECIO;
    
        [DataMember]
        public System.Guid CODIGOSUBPRODUCTO
        {
            get { return _cODIGOSUBPRODUCTO; }
            set
            {
                if (_cODIGOSUBPRODUCTO != value)
                {
                    ChangeTracker.RecordOriginalValue("CODIGOSUBPRODUCTO", _cODIGOSUBPRODUCTO);
                    if (!IsDeserializing)
                    {
                        if (MOVIMIENTOSUBPRODUCTO != null && MOVIMIENTOSUBPRODUCTO.CODIGOSUBPRODUCTO != value)
                        {
                            MOVIMIENTOSUBPRODUCTO = null;
                        }
                    }
                    _cODIGOSUBPRODUCTO = value;
                    OnPropertyChanged("CODIGOSUBPRODUCTO");
                }
            }
        }
        private System.Guid _cODIGOSUBPRODUCTO;
    
        [DataMember]
        public decimal PRECIO
        {
            get { return _pRECIO; }
            set
            {
                if (_pRECIO != value)
                {
                    _pRECIO = value;
                    OnPropertyChanged("PRECIO");
                }
            }
        }
        private decimal _pRECIO;
    
        [DataMember]
        public System.DateTime FECHAHISTORICOPRECIO
        {
            get { return _fECHAHISTORICOPRECIO; }
            set
            {
                if (_fECHAHISTORICOPRECIO != value)
                {
                    _fECHAHISTORICOPRECIO = value;
                    OnPropertyChanged("FECHAHISTORICOPRECIO");
                }
            }
        }
        private System.DateTime _fECHAHISTORICOPRECIO;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public MOVIMIENTOSUBPRODUCTO MOVIMIENTOSUBPRODUCTO
        {
            get { return _mOVIMIENTOSUBPRODUCTO; }
            set
            {
                if (!ReferenceEquals(_mOVIMIENTOSUBPRODUCTO, value))
                {
                    var previousValue = _mOVIMIENTOSUBPRODUCTO;
                    _mOVIMIENTOSUBPRODUCTO = value;
                    FixupMOVIMIENTOSUBPRODUCTO(previousValue);
                    OnNavigationPropertyChanged("MOVIMIENTOSUBPRODUCTO");
                }
            }
        }
        private MOVIMIENTOSUBPRODUCTO _mOVIMIENTOSUBPRODUCTO;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            MOVIMIENTOSUBPRODUCTO = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupMOVIMIENTOSUBPRODUCTO(MOVIMIENTOSUBPRODUCTO previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.HISTORICOPRECIO.Contains(this))
            {
                previousValue.HISTORICOPRECIO.Remove(this);
            }
    
            if (MOVIMIENTOSUBPRODUCTO != null)
            {
                if (!MOVIMIENTOSUBPRODUCTO.HISTORICOPRECIO.Contains(this))
                {
                    MOVIMIENTOSUBPRODUCTO.HISTORICOPRECIO.Add(this);
                }
    
                CODIGOSUBPRODUCTO = MOVIMIENTOSUBPRODUCTO.CODIGOSUBPRODUCTO;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("MOVIMIENTOSUBPRODUCTO")
                    && (ChangeTracker.OriginalValues["MOVIMIENTOSUBPRODUCTO"] == MOVIMIENTOSUBPRODUCTO))
                {
                    ChangeTracker.OriginalValues.Remove("MOVIMIENTOSUBPRODUCTO");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("MOVIMIENTOSUBPRODUCTO", previousValue);
                }
                if (MOVIMIENTOSUBPRODUCTO != null && !MOVIMIENTOSUBPRODUCTO.ChangeTracker.ChangeTrackingEnabled)
                {
                    MOVIMIENTOSUBPRODUCTO.StartTracking();
                }
            }
        }

        #endregion
    }
}
