//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace DQBase.DataAccessLayer
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(USUARIO))]
    public partial class HISTORIALUSUARIO: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public System.Guid IDHISTORIAL
        {
            get { return _iDHISTORIAL; }
            set
            {
                if (_iDHISTORIAL != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IDHISTORIAL' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iDHISTORIAL = value;
                    OnPropertyChanged("IDHISTORIAL");
                }
            }
        }
        private System.Guid _iDHISTORIAL;
    
        [DataMember]
        public System.Guid IDUSUARIO
        {
            get { return _iDUSUARIO; }
            set
            {
                if (_iDUSUARIO != value)
                {
                    ChangeTracker.RecordOriginalValue("IDUSUARIO", _iDUSUARIO);
                    if (!IsDeserializing)
                    {
                        if (USUARIO != null && USUARIO.IDUSUARIO != value)
                        {
                            USUARIO = null;
                        }
                    }
                    _iDUSUARIO = value;
                    OnPropertyChanged("IDUSUARIO");
                }
            }
        }
        private System.Guid _iDUSUARIO;
    
        [DataMember]
        public System.DateTime FECHAHISTORIAL
        {
            get { return _fECHAHISTORIAL; }
            set
            {
                if (_fECHAHISTORIAL != value)
                {
                    _fECHAHISTORIAL = value;
                    OnPropertyChanged("FECHAHISTORIAL");
                }
            }
        }
        private System.DateTime _fECHAHISTORIAL;
    
        [DataMember]
        public string ESTADOUSUARIO
        {
            get { return _eSTADOUSUARIO; }
            set
            {
                if (_eSTADOUSUARIO != value)
                {
                    _eSTADOUSUARIO = value;
                    OnPropertyChanged("ESTADOUSUARIO");
                }
            }
        }
        private string _eSTADOUSUARIO;
    
        [DataMember]
        public string SERVICIOUSUARIO
        {
            get { return _sERVICIOUSUARIO; }
            set
            {
                if (_sERVICIOUSUARIO != value)
                {
                    _sERVICIOUSUARIO = value;
                    OnPropertyChanged("SERVICIOUSUARIO");
                }
            }
        }
        private string _sERVICIOUSUARIO;
    
        [DataMember]
        public string COMENTARIO
        {
            get { return _cOMENTARIO; }
            set
            {
                if (_cOMENTARIO != value)
                {
                    _cOMENTARIO = value;
                    OnPropertyChanged("COMENTARIO");
                }
            }
        }
        private string _cOMENTARIO;
    
        [DataMember]
        public Nullable<bool> ESBORRADOHISTORIALUSU
        {
            get { return _eSBORRADOHISTORIALUSU; }
            set
            {
                if (_eSBORRADOHISTORIALUSU != value)
                {
                    _eSBORRADOHISTORIALUSU = value;
                    OnPropertyChanged("ESBORRADOHISTORIALUSU");
                }
            }
        }
        private Nullable<bool> _eSBORRADOHISTORIALUSU;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public USUARIO USUARIO
        {
            get { return _uSUARIO; }
            set
            {
                if (!ReferenceEquals(_uSUARIO, value))
                {
                    var previousValue = _uSUARIO;
                    _uSUARIO = value;
                    FixupUSUARIO(previousValue);
                    OnNavigationPropertyChanged("USUARIO");
                }
            }
        }
        private USUARIO _uSUARIO;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            USUARIO = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupUSUARIO(USUARIO previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.HISTORIALUSUARIO.Contains(this))
            {
                previousValue.HISTORIALUSUARIO.Remove(this);
            }
    
            if (USUARIO != null)
            {
                if (!USUARIO.HISTORIALUSUARIO.Contains(this))
                {
                    USUARIO.HISTORIALUSUARIO.Add(this);
                }
    
                IDUSUARIO = USUARIO.IDUSUARIO;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("USUARIO")
                    && (ChangeTracker.OriginalValues["USUARIO"] == USUARIO))
                {
                    ChangeTracker.OriginalValues.Remove("USUARIO");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("USUARIO", previousValue);
                }
                if (USUARIO != null && !USUARIO.ChangeTracker.ChangeTrackingEnabled)
                {
                    USUARIO.StartTracking();
                }
            }
        }

        #endregion
    }
}
