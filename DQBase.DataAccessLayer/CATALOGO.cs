//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace DQBase.DataAccessLayer
{
    [DataContract(IsReference = true)]
    public partial class CATALOGO: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public System.Guid IDCATALAGO
        {
            get { return _iDCATALAGO; }
            set
            {
                if (_iDCATALAGO != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IDCATALAGO' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iDCATALAGO = value;
                    OnPropertyChanged("IDCATALAGO");
                }
            }
        }
        private System.Guid _iDCATALAGO;
    
        [DataMember]
        public string DESCRIPCIONCATALOGO
        {
            get { return _dESCRIPCIONCATALOGO; }
            set
            {
                if (_dESCRIPCIONCATALOGO != value)
                {
                    _dESCRIPCIONCATALOGO = value;
                    OnPropertyChanged("DESCRIPCIONCATALOGO");
                }
            }
        }
        private string _dESCRIPCIONCATALOGO;
    
        [DataMember]
        public string TABLA
        {
            get { return _tABLA; }
            set
            {
                if (_tABLA != value)
                {
                    _tABLA = value;
                    OnPropertyChanged("TABLA");
                }
            }
        }
        private string _tABLA;
    
        [DataMember]
        public bool ESBORRADOCATALOGO
        {
            get { return _eSBORRADOCATALOGO; }
            set
            {
                if (_eSBORRADOCATALOGO != value)
                {
                    _eSBORRADOCATALOGO = value;
                    OnPropertyChanged("ESBORRADOCATALOGO");
                }
            }
        }
        private bool _eSBORRADOCATALOGO;
    
        [DataMember]
        public string CODIGO
        {
            get { return _cODIGO; }
            set
            {
                if (_cODIGO != value)
                {
                    _cODIGO = value;
                    OnPropertyChanged("CODIGO");
                }
            }
        }
        private string _cODIGO;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion
    }
}
