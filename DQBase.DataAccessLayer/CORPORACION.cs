//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace DQBase.DataAccessLayer
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(LABORATORIO))]
    [KnownType(typeof(UBICACIONGEOGRAFICA))]
    public partial class CORPORACION: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public System.Guid IDCORPORACION
        {
            get { return _iDCORPORACION; }
            set
            {
                if (_iDCORPORACION != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IDCORPORACION' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iDCORPORACION = value;
                    OnPropertyChanged("IDCORPORACION");
                }
            }
        }
        private System.Guid _iDCORPORACION;
    
        [DataMember]
        public string NOMBRECORPORACION
        {
            get { return _nOMBRECORPORACION; }
            set
            {
                if (_nOMBRECORPORACION != value)
                {
                    _nOMBRECORPORACION = value;
                    OnPropertyChanged("NOMBRECORPORACION");
                }
            }
        }
        private string _nOMBRECORPORACION;
    
        [DataMember]
        public string ABREVIATURACORPORACION
        {
            get { return _aBREVIATURACORPORACION; }
            set
            {
                if (_aBREVIATURACORPORACION != value)
                {
                    _aBREVIATURACORPORACION = value;
                    OnPropertyChanged("ABREVIATURACORPORACION");
                }
            }
        }
        private string _aBREVIATURACORPORACION;
    
        [DataMember]
        public bool ESBORRADOCORPORACION
        {
            get { return _eSBORRADOCORPORACION; }
            set
            {
                if (_eSBORRADOCORPORACION != value)
                {
                    _eSBORRADOCORPORACION = value;
                    OnPropertyChanged("ESBORRADOCORPORACION");
                }
            }
        }
        private bool _eSBORRADOCORPORACION;
    
        [DataMember]
        public Nullable<System.Guid> IdUbicacion
        {
            get { return _idUbicacion; }
            set
            {
                if (_idUbicacion != value)
                {
                    ChangeTracker.RecordOriginalValue("IdUbicacion", _idUbicacion);
                    if (!IsDeserializing)
                    {
                        if (UBICACIONGEOGRAFICA != null && UBICACIONGEOGRAFICA.IDUBICACION != value)
                        {
                            UBICACIONGEOGRAFICA = null;
                        }
                    }
                    _idUbicacion = value;
                    OnPropertyChanged("IdUbicacion");
                }
            }
        }
        private Nullable<System.Guid> _idUbicacion;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<LABORATORIO> LABORATORIO
        {
            get
            {
                if (_lABORATORIO == null)
                {
                    _lABORATORIO = new TrackableCollection<LABORATORIO>();
                    _lABORATORIO.CollectionChanged += FixupLABORATORIO;
                }
                return _lABORATORIO;
            }
            set
            {
                if (!ReferenceEquals(_lABORATORIO, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_lABORATORIO != null)
                    {
                        _lABORATORIO.CollectionChanged -= FixupLABORATORIO;
                    }
                    _lABORATORIO = value;
                    if (_lABORATORIO != null)
                    {
                        _lABORATORIO.CollectionChanged += FixupLABORATORIO;
                    }
                    OnNavigationPropertyChanged("LABORATORIO");
                }
            }
        }
        private TrackableCollection<LABORATORIO> _lABORATORIO;
    
        [DataMember]
        public UBICACIONGEOGRAFICA UBICACIONGEOGRAFICA
        {
            get { return _uBICACIONGEOGRAFICA; }
            set
            {
                if (!ReferenceEquals(_uBICACIONGEOGRAFICA, value))
                {
                    var previousValue = _uBICACIONGEOGRAFICA;
                    _uBICACIONGEOGRAFICA = value;
                    FixupUBICACIONGEOGRAFICA(previousValue);
                    OnNavigationPropertyChanged("UBICACIONGEOGRAFICA");
                }
            }
        }
        private UBICACIONGEOGRAFICA _uBICACIONGEOGRAFICA;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            LABORATORIO.Clear();
            UBICACIONGEOGRAFICA = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupUBICACIONGEOGRAFICA(UBICACIONGEOGRAFICA previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.CORPORACION.Contains(this))
            {
                previousValue.CORPORACION.Remove(this);
            }
    
            if (UBICACIONGEOGRAFICA != null)
            {
                if (!UBICACIONGEOGRAFICA.CORPORACION.Contains(this))
                {
                    UBICACIONGEOGRAFICA.CORPORACION.Add(this);
                }
    
                IdUbicacion = UBICACIONGEOGRAFICA.IDUBICACION;
            }
            else if (!skipKeys)
            {
                IdUbicacion = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("UBICACIONGEOGRAFICA")
                    && (ChangeTracker.OriginalValues["UBICACIONGEOGRAFICA"] == UBICACIONGEOGRAFICA))
                {
                    ChangeTracker.OriginalValues.Remove("UBICACIONGEOGRAFICA");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("UBICACIONGEOGRAFICA", previousValue);
                }
                if (UBICACIONGEOGRAFICA != null && !UBICACIONGEOGRAFICA.ChangeTracker.ChangeTrackingEnabled)
                {
                    UBICACIONGEOGRAFICA.StartTracking();
                }
            }
        }
    
        private void FixupLABORATORIO(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (LABORATORIO item in e.NewItems)
                {
                    item.CORPORACION = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("LABORATORIO", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (LABORATORIO item in e.OldItems)
                {
                    if (ReferenceEquals(item.CORPORACION, this))
                    {
                        item.CORPORACION = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("LABORATORIO", item);
                    }
                }
            }
        }

        #endregion
    }
}
