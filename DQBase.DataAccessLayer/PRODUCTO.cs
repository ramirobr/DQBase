//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace DQBase.DataAccessLayer
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(SUBPRODUCTO))]
    public partial class PRODUCTO: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public System.Guid IDPRODUCTO
        {
            get { return _iDPRODUCTO; }
            set
            {
                if (_iDPRODUCTO != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IDPRODUCTO' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iDPRODUCTO = value;
                    OnPropertyChanged("IDPRODUCTO");
                }
            }
        }
        private System.Guid _iDPRODUCTO;
    
        [DataMember]
        public string NOMBREPRODUCTO
        {
            get { return _nOMBREPRODUCTO; }
            set
            {
                if (_nOMBREPRODUCTO != value)
                {
                    _nOMBREPRODUCTO = value;
                    OnPropertyChanged("NOMBREPRODUCTO");
                }
            }
        }
        private string _nOMBREPRODUCTO;
    
        [DataMember]
        public bool ESBORRADOPRODUCTO
        {
            get { return _eSBORRADOPRODUCTO; }
            set
            {
                if (_eSBORRADOPRODUCTO != value)
                {
                    _eSBORRADOPRODUCTO = value;
                    OnPropertyChanged("ESBORRADOPRODUCTO");
                }
            }
        }
        private bool _eSBORRADOPRODUCTO;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<SUBPRODUCTO> SUBPRODUCTO
        {
            get
            {
                if (_sUBPRODUCTO == null)
                {
                    _sUBPRODUCTO = new TrackableCollection<SUBPRODUCTO>();
                    _sUBPRODUCTO.CollectionChanged += FixupSUBPRODUCTO;
                }
                return _sUBPRODUCTO;
            }
            set
            {
                if (!ReferenceEquals(_sUBPRODUCTO, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_sUBPRODUCTO != null)
                    {
                        _sUBPRODUCTO.CollectionChanged -= FixupSUBPRODUCTO;
                    }
                    _sUBPRODUCTO = value;
                    if (_sUBPRODUCTO != null)
                    {
                        _sUBPRODUCTO.CollectionChanged += FixupSUBPRODUCTO;
                    }
                    OnNavigationPropertyChanged("SUBPRODUCTO");
                }
            }
        }
        private TrackableCollection<SUBPRODUCTO> _sUBPRODUCTO;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            SUBPRODUCTO.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupSUBPRODUCTO(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (SUBPRODUCTO item in e.NewItems)
                {
                    item.PRODUCTO = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("SUBPRODUCTO", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SUBPRODUCTO item in e.OldItems)
                {
                    if (ReferenceEquals(item.PRODUCTO, this))
                    {
                        item.PRODUCTO = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("SUBPRODUCTO", item);
                    }
                }
            }
        }

        #endregion
    }
}
