//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace DQBase.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(LABORATORIO))]
    [KnownType(typeof(MOVIMIENTOSUBPRODUCTO))]
    [KnownType(typeof(UBICACIONGEOGRAFICA))]
    [KnownType(typeof(USUARIO))]
    public partial class VENTA: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public System.Guid IDVENTA
        {
            get { return _iDVENTA; }
            set
            {
                if (_iDVENTA != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IDVENTA' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iDVENTA = value;
                    OnPropertyChanged("IDVENTA");
                }
            }
        }
        private System.Guid _iDVENTA;
    
        [DataMember]
        public System.Guid CODIGOSUBPRODUCTO
        {
            get { return _cODIGOSUBPRODUCTO; }
            set
            {
                if (_cODIGOSUBPRODUCTO != value)
                {
                    ChangeTracker.RecordOriginalValue("CODIGOSUBPRODUCTO", _cODIGOSUBPRODUCTO);
                    if (!IsDeserializing)
                    {
                        if (MOVIMIENTOSUBPRODUCTO != null && MOVIMIENTOSUBPRODUCTO.CODIGOSUBPRODUCTO != value)
                        {
                            MOVIMIENTOSUBPRODUCTO = null;
                        }
                    }
                    _cODIGOSUBPRODUCTO = value;
                    OnPropertyChanged("CODIGOSUBPRODUCTO");
                }
            }
        }
        private System.Guid _cODIGOSUBPRODUCTO;
    
        [DataMember]
        public System.Guid IDUSUARIO
        {
            get { return _iDUSUARIO; }
            set
            {
                if (_iDUSUARIO != value)
                {
                    ChangeTracker.RecordOriginalValue("IDUSUARIO", _iDUSUARIO);
                    if (!IsDeserializing)
                    {
                        if (USUARIO != null && USUARIO.IDUSUARIO != value)
                        {
                            USUARIO = null;
                        }
                    }
                    _iDUSUARIO = value;
                    OnPropertyChanged("IDUSUARIO");
                }
            }
        }
        private System.Guid _iDUSUARIO;
    
        [DataMember]
        public System.Guid IDUBICACION
        {
            get { return _iDUBICACION; }
            set
            {
                if (_iDUBICACION != value)
                {
                    ChangeTracker.RecordOriginalValue("IDUBICACION", _iDUBICACION);
                    if (!IsDeserializing)
                    {
                        if (UBICACIONGEOGRAFICA != null && UBICACIONGEOGRAFICA.IDUBICACION != value)
                        {
                            UBICACIONGEOGRAFICA = null;
                        }
                    }
                    _iDUBICACION = value;
                    OnPropertyChanged("IDUBICACION");
                }
            }
        }
        private System.Guid _iDUBICACION;
    
        [DataMember]
        public System.Guid IDLABORATORIO
        {
            get { return _iDLABORATORIO; }
            set
            {
                if (_iDLABORATORIO != value)
                {
                    ChangeTracker.RecordOriginalValue("IDLABORATORIO", _iDLABORATORIO);
                    if (!IsDeserializing)
                    {
                        if (LABORATORIO != null && LABORATORIO.IDLABORATORIO != value)
                        {
                            LABORATORIO = null;
                        }
                    }
                    _iDLABORATORIO = value;
                    OnPropertyChanged("IDLABORATORIO");
                }
            }
        }
        private System.Guid _iDLABORATORIO;
    
        [DataMember]
        public System.DateTime FECHA
        {
            get { return _fECHA; }
            set
            {
                if (_fECHA != value)
                {
                    _fECHA = value;
                    OnPropertyChanged("FECHA");
                }
            }
        }
        private System.DateTime _fECHA;
    
        [DataMember]
        public int CANTIDADVENTA
        {
            get { return _cANTIDADVENTA; }
            set
            {
                if (_cANTIDADVENTA != value)
                {
                    _cANTIDADVENTA = value;
                    OnPropertyChanged("CANTIDADVENTA");
                }
            }
        }
        private int _cANTIDADVENTA;
    
        [DataMember]
        public Nullable<decimal> TOTALVENTA
        {
            get { return _tOTALVENTA; }
            set
            {
                if (_tOTALVENTA != value)
                {
                    _tOTALVENTA = value;
                    OnPropertyChanged("TOTALVENTA");
                }
            }
        }
        private Nullable<decimal> _tOTALVENTA;
    
        [DataMember]
        public bool ESCORRECTO
        {
            get { return _eSCORRECTO; }
            set
            {
                if (_eSCORRECTO != value)
                {
                    _eSCORRECTO = value;
                    OnPropertyChanged("ESCORRECTO");
                }
            }
        }
        private bool _eSCORRECTO;
    
        [DataMember]
        public bool ESPUBLICO
        {
            get { return _eSPUBLICO; }
            set
            {
                if (_eSPUBLICO != value)
                {
                    _eSPUBLICO = value;
                    OnPropertyChanged("ESPUBLICO");
                }
            }
        }
        private bool _eSPUBLICO;
    
        [DataMember]
        public string NOMBREINSTITUCION
        {
            get { return _nOMBREINSTITUCION; }
            set
            {
                if (_nOMBREINSTITUCION != value)
                {
                    _nOMBREINSTITUCION = value;
                    OnPropertyChanged("NOMBREINSTITUCION");
                }
            }
        }
        private string _nOMBREINSTITUCION;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public LABORATORIO LABORATORIO
        {
            get { return _lABORATORIO; }
            set
            {
                if (!ReferenceEquals(_lABORATORIO, value))
                {
                    var previousValue = _lABORATORIO;
                    _lABORATORIO = value;
                    FixupLABORATORIO(previousValue);
                    OnNavigationPropertyChanged("LABORATORIO");
                }
            }
        }
        private LABORATORIO _lABORATORIO;
    
        [DataMember]
        public MOVIMIENTOSUBPRODUCTO MOVIMIENTOSUBPRODUCTO
        {
            get { return _mOVIMIENTOSUBPRODUCTO; }
            set
            {
                if (!ReferenceEquals(_mOVIMIENTOSUBPRODUCTO, value))
                {
                    var previousValue = _mOVIMIENTOSUBPRODUCTO;
                    _mOVIMIENTOSUBPRODUCTO = value;
                    FixupMOVIMIENTOSUBPRODUCTO(previousValue);
                    OnNavigationPropertyChanged("MOVIMIENTOSUBPRODUCTO");
                }
            }
        }
        private MOVIMIENTOSUBPRODUCTO _mOVIMIENTOSUBPRODUCTO;
    
        [DataMember]
        public UBICACIONGEOGRAFICA UBICACIONGEOGRAFICA
        {
            get { return _uBICACIONGEOGRAFICA; }
            set
            {
                if (!ReferenceEquals(_uBICACIONGEOGRAFICA, value))
                {
                    var previousValue = _uBICACIONGEOGRAFICA;
                    _uBICACIONGEOGRAFICA = value;
                    FixupUBICACIONGEOGRAFICA(previousValue);
                    OnNavigationPropertyChanged("UBICACIONGEOGRAFICA");
                }
            }
        }
        private UBICACIONGEOGRAFICA _uBICACIONGEOGRAFICA;
    
        [DataMember]
        public USUARIO USUARIO
        {
            get { return _uSUARIO; }
            set
            {
                if (!ReferenceEquals(_uSUARIO, value))
                {
                    var previousValue = _uSUARIO;
                    _uSUARIO = value;
                    FixupUSUARIO(previousValue);
                    OnNavigationPropertyChanged("USUARIO");
                }
            }
        }
        private USUARIO _uSUARIO;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            LABORATORIO = null;
            MOVIMIENTOSUBPRODUCTO = null;
            UBICACIONGEOGRAFICA = null;
            USUARIO = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupLABORATORIO(LABORATORIO previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.VENTA.Contains(this))
            {
                previousValue.VENTA.Remove(this);
            }
    
            if (LABORATORIO != null)
            {
                if (!LABORATORIO.VENTA.Contains(this))
                {
                    LABORATORIO.VENTA.Add(this);
                }
    
                IDLABORATORIO = LABORATORIO.IDLABORATORIO;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("LABORATORIO")
                    && (ChangeTracker.OriginalValues["LABORATORIO"] == LABORATORIO))
                {
                    ChangeTracker.OriginalValues.Remove("LABORATORIO");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("LABORATORIO", previousValue);
                }
                if (LABORATORIO != null && !LABORATORIO.ChangeTracker.ChangeTrackingEnabled)
                {
                    LABORATORIO.StartTracking();
                }
            }
        }
    
        private void FixupMOVIMIENTOSUBPRODUCTO(MOVIMIENTOSUBPRODUCTO previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.VENTA.Contains(this))
            {
                previousValue.VENTA.Remove(this);
            }
    
            if (MOVIMIENTOSUBPRODUCTO != null)
            {
                if (!MOVIMIENTOSUBPRODUCTO.VENTA.Contains(this))
                {
                    MOVIMIENTOSUBPRODUCTO.VENTA.Add(this);
                }
    
                CODIGOSUBPRODUCTO = MOVIMIENTOSUBPRODUCTO.CODIGOSUBPRODUCTO;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("MOVIMIENTOSUBPRODUCTO")
                    && (ChangeTracker.OriginalValues["MOVIMIENTOSUBPRODUCTO"] == MOVIMIENTOSUBPRODUCTO))
                {
                    ChangeTracker.OriginalValues.Remove("MOVIMIENTOSUBPRODUCTO");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("MOVIMIENTOSUBPRODUCTO", previousValue);
                }
                if (MOVIMIENTOSUBPRODUCTO != null && !MOVIMIENTOSUBPRODUCTO.ChangeTracker.ChangeTrackingEnabled)
                {
                    MOVIMIENTOSUBPRODUCTO.StartTracking();
                }
            }
        }
    
        private void FixupUBICACIONGEOGRAFICA(UBICACIONGEOGRAFICA previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.VENTA.Contains(this))
            {
                previousValue.VENTA.Remove(this);
            }
    
            if (UBICACIONGEOGRAFICA != null)
            {
                if (!UBICACIONGEOGRAFICA.VENTA.Contains(this))
                {
                    UBICACIONGEOGRAFICA.VENTA.Add(this);
                }
    
                IDUBICACION = UBICACIONGEOGRAFICA.IDUBICACION;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("UBICACIONGEOGRAFICA")
                    && (ChangeTracker.OriginalValues["UBICACIONGEOGRAFICA"] == UBICACIONGEOGRAFICA))
                {
                    ChangeTracker.OriginalValues.Remove("UBICACIONGEOGRAFICA");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("UBICACIONGEOGRAFICA", previousValue);
                }
                if (UBICACIONGEOGRAFICA != null && !UBICACIONGEOGRAFICA.ChangeTracker.ChangeTrackingEnabled)
                {
                    UBICACIONGEOGRAFICA.StartTracking();
                }
            }
        }
    
        private void FixupUSUARIO(USUARIO previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.VENTA.Contains(this))
            {
                previousValue.VENTA.Remove(this);
            }
    
            if (USUARIO != null)
            {
                if (!USUARIO.VENTA.Contains(this))
                {
                    USUARIO.VENTA.Add(this);
                }
    
                IDUSUARIO = USUARIO.IDUSUARIO;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("USUARIO")
                    && (ChangeTracker.OriginalValues["USUARIO"] == USUARIO))
                {
                    ChangeTracker.OriginalValues.Remove("USUARIO");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("USUARIO", previousValue);
                }
                if (USUARIO != null && !USUARIO.ChangeTracker.ChangeTrackingEnabled)
                {
                    USUARIO.StartTracking();
                }
            }
        }

        #endregion
    }
}
