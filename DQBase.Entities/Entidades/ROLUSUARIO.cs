//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace DQBase.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(ROL))]
    [KnownType(typeof(USUARIO))]
    public partial class ROLUSUARIO: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public System.Guid IDROLUSUARIO
        {
            get { return _iDROLUSUARIO; }
            set
            {
                if (_iDROLUSUARIO != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IDROLUSUARIO' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iDROLUSUARIO = value;
                    OnPropertyChanged("IDROLUSUARIO");
                }
            }
        }
        private System.Guid _iDROLUSUARIO;
    
        [DataMember]
        public System.Guid IDUSUARIO
        {
            get { return _iDUSUARIO; }
            set
            {
                if (_iDUSUARIO != value)
                {
                    ChangeTracker.RecordOriginalValue("IDUSUARIO", _iDUSUARIO);
                    if (!IsDeserializing)
                    {
                        if (USUARIO != null && USUARIO.IDUSUARIO != value)
                        {
                            USUARIO = null;
                        }
                    }
                    _iDUSUARIO = value;
                    OnPropertyChanged("IDUSUARIO");
                }
            }
        }
        private System.Guid _iDUSUARIO;
    
        [DataMember]
        public System.Guid IDROL
        {
            get { return _iDROL; }
            set
            {
                if (_iDROL != value)
                {
                    ChangeTracker.RecordOriginalValue("IDROL", _iDROL);
                    if (!IsDeserializing)
                    {
                        if (ROL != null && ROL.IDROL != value)
                        {
                            ROL = null;
                        }
                    }
                    _iDROL = value;
                    OnPropertyChanged("IDROL");
                }
            }
        }
        private System.Guid _iDROL;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public ROL ROL
        {
            get { return _rOL; }
            set
            {
                if (!ReferenceEquals(_rOL, value))
                {
                    var previousValue = _rOL;
                    _rOL = value;
                    FixupROL(previousValue);
                    OnNavigationPropertyChanged("ROL");
                }
            }
        }
        private ROL _rOL;
    
        [DataMember]
        public USUARIO USUARIO
        {
            get { return _uSUARIO; }
            set
            {
                if (!ReferenceEquals(_uSUARIO, value))
                {
                    var previousValue = _uSUARIO;
                    _uSUARIO = value;
                    FixupUSUARIO(previousValue);
                    OnNavigationPropertyChanged("USUARIO");
                }
            }
        }
        private USUARIO _uSUARIO;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            ROL = null;
            USUARIO = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupROL(ROL previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ROLUSUARIO.Contains(this))
            {
                previousValue.ROLUSUARIO.Remove(this);
            }
    
            if (ROL != null)
            {
                if (!ROL.ROLUSUARIO.Contains(this))
                {
                    ROL.ROLUSUARIO.Add(this);
                }
    
                IDROL = ROL.IDROL;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ROL")
                    && (ChangeTracker.OriginalValues["ROL"] == ROL))
                {
                    ChangeTracker.OriginalValues.Remove("ROL");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ROL", previousValue);
                }
                if (ROL != null && !ROL.ChangeTracker.ChangeTrackingEnabled)
                {
                    ROL.StartTracking();
                }
            }
        }
    
        private void FixupUSUARIO(USUARIO previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ROLUSUARIO.Contains(this))
            {
                previousValue.ROLUSUARIO.Remove(this);
            }
    
            if (USUARIO != null)
            {
                if (!USUARIO.ROLUSUARIO.Contains(this))
                {
                    USUARIO.ROLUSUARIO.Add(this);
                }
    
                IDUSUARIO = USUARIO.IDUSUARIO;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("USUARIO")
                    && (ChangeTracker.OriginalValues["USUARIO"] == USUARIO))
                {
                    ChangeTracker.OriginalValues.Remove("USUARIO");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("USUARIO", previousValue);
                }
                if (USUARIO != null && !USUARIO.ChangeTracker.ChangeTrackingEnabled)
                {
                    USUARIO.StartTracking();
                }
            }
        }

        #endregion
    }
}
