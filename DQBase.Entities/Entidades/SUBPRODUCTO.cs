//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace DQBase.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(GRUPOTERAPEUTICO))]
    [KnownType(typeof(MOVIMIENTOSUBPRODUCTO))]
    [KnownType(typeof(PRODUCTO))]
    public partial class SUBPRODUCTO: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public System.Guid IDSUBPRODUCTO
        {
            get { return _iDSUBPRODUCTO; }
            set
            {
                if (_iDSUBPRODUCTO != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IDSUBPRODUCTO' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iDSUBPRODUCTO = value;
                    OnPropertyChanged("IDSUBPRODUCTO");
                }
            }
        }
        private System.Guid _iDSUBPRODUCTO;
    
        [DataMember]
        public System.Guid IDPRODUCTO
        {
            get { return _iDPRODUCTO; }
            set
            {
                if (_iDPRODUCTO != value)
                {
                    ChangeTracker.RecordOriginalValue("IDPRODUCTO", _iDPRODUCTO);
                    if (!IsDeserializing)
                    {
                        if (PRODUCTO != null && PRODUCTO.IDPRODUCTO != value)
                        {
                            PRODUCTO = null;
                        }
                    }
                    _iDPRODUCTO = value;
                    OnPropertyChanged("IDPRODUCTO");
                }
            }
        }
        private System.Guid _iDPRODUCTO;
    
        [DataMember]
        public System.Guid IDGRUPO
        {
            get { return _iDGRUPO; }
            set
            {
                if (_iDGRUPO != value)
                {
                    ChangeTracker.RecordOriginalValue("IDGRUPO", _iDGRUPO);
                    if (!IsDeserializing)
                    {
                        if (GRUPOTERAPEUTICO != null && GRUPOTERAPEUTICO.IDGRUPO != value)
                        {
                            GRUPOTERAPEUTICO = null;
                        }
                    }
                    _iDGRUPO = value;
                    OnPropertyChanged("IDGRUPO");
                }
            }
        }
        private System.Guid _iDGRUPO;
    
        [DataMember]
        public Nullable<System.Guid> IDAPLICACION
        {
            get { return _iDAPLICACION; }
            set
            {
                if (_iDAPLICACION != value)
                {
                    _iDAPLICACION = value;
                    OnPropertyChanged("IDAPLICACION");
                }
            }
        }
        private Nullable<System.Guid> _iDAPLICACION;
    
        [DataMember]
        public Nullable<System.Guid> IDFORMAPROD
        {
            get { return _iDFORMAPROD; }
            set
            {
                if (_iDFORMAPROD != value)
                {
                    _iDFORMAPROD = value;
                    OnPropertyChanged("IDFORMAPROD");
                }
            }
        }
        private Nullable<System.Guid> _iDFORMAPROD;
    
        [DataMember]
        public Nullable<System.Guid> IDTIPOMERCADO
        {
            get { return _iDTIPOMERCADO; }
            set
            {
                if (_iDTIPOMERCADO != value)
                {
                    _iDTIPOMERCADO = value;
                    OnPropertyChanged("IDTIPOMERCADO");
                }
            }
        }
        private Nullable<System.Guid> _iDTIPOMERCADO;
    
        [DataMember]
        public Nullable<System.Guid> IDTIPOPRODUCTO
        {
            get { return _iDTIPOPRODUCTO; }
            set
            {
                if (_iDTIPOPRODUCTO != value)
                {
                    _iDTIPOPRODUCTO = value;
                    OnPropertyChanged("IDTIPOPRODUCTO");
                }
            }
        }
        private Nullable<System.Guid> _iDTIPOPRODUCTO;
    
        [DataMember]
        public string PRESENTACION
        {
            get { return _pRESENTACION; }
            set
            {
                if (_pRESENTACION != value)
                {
                    _pRESENTACION = value;
                    OnPropertyChanged("PRESENTACION");
                }
            }
        }
        private string _pRESENTACION;
    
        [DataMember]
        public double CONCENTRACION
        {
            get { return _cONCENTRACION; }
            set
            {
                if (_cONCENTRACION != value)
                {
                    _cONCENTRACION = value;
                    OnPropertyChanged("CONCENTRACION");
                }
            }
        }
        private double _cONCENTRACION;
    
        [DataMember]
        public string UNIDAD
        {
            get { return _uNIDAD; }
            set
            {
                if (_uNIDAD != value)
                {
                    _uNIDAD = value;
                    OnPropertyChanged("UNIDAD");
                }
            }
        }
        private string _uNIDAD;
    
        [DataMember]
        public short CANTIDAD
        {
            get { return _cANTIDAD; }
            set
            {
                if (_cANTIDAD != value)
                {
                    _cANTIDAD = value;
                    OnPropertyChanged("CANTIDAD");
                }
            }
        }
        private short _cANTIDAD;
    
        [DataMember]
        public string PRINCIPIOACTIVO
        {
            get { return _pRINCIPIOACTIVO; }
            set
            {
                if (_pRINCIPIOACTIVO != value)
                {
                    _pRINCIPIOACTIVO = value;
                    OnPropertyChanged("PRINCIPIOACTIVO");
                }
            }
        }
        private string _pRINCIPIOACTIVO;
    
        [DataMember]
        public string INDICACIONESDEUSO
        {
            get { return _iNDICACIONESDEUSO; }
            set
            {
                if (_iNDICACIONESDEUSO != value)
                {
                    _iNDICACIONESDEUSO = value;
                    OnPropertyChanged("INDICACIONESDEUSO");
                }
            }
        }
        private string _iNDICACIONESDEUSO;
    
        [DataMember]
        public bool ESBORRADOSUBPRODUCTO
        {
            get { return _eSBORRADOSUBPRODUCTO; }
            set
            {
                if (_eSBORRADOSUBPRODUCTO != value)
                {
                    _eSBORRADOSUBPRODUCTO = value;
                    OnPropertyChanged("ESBORRADOSUBPRODUCTO");
                }
            }
        }
        private bool _eSBORRADOSUBPRODUCTO;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public GRUPOTERAPEUTICO GRUPOTERAPEUTICO
        {
            get { return _gRUPOTERAPEUTICO; }
            set
            {
                if (!ReferenceEquals(_gRUPOTERAPEUTICO, value))
                {
                    var previousValue = _gRUPOTERAPEUTICO;
                    _gRUPOTERAPEUTICO = value;
                    FixupGRUPOTERAPEUTICO(previousValue);
                    OnNavigationPropertyChanged("GRUPOTERAPEUTICO");
                }
            }
        }
        private GRUPOTERAPEUTICO _gRUPOTERAPEUTICO;
    
        [DataMember]
        public TrackableCollection<MOVIMIENTOSUBPRODUCTO> MOVIMIENTOSUBPRODUCTO
        {
            get
            {
                if (_mOVIMIENTOSUBPRODUCTO == null)
                {
                    _mOVIMIENTOSUBPRODUCTO = new TrackableCollection<MOVIMIENTOSUBPRODUCTO>();
                    _mOVIMIENTOSUBPRODUCTO.CollectionChanged += FixupMOVIMIENTOSUBPRODUCTO;
                }
                return _mOVIMIENTOSUBPRODUCTO;
            }
            set
            {
                if (!ReferenceEquals(_mOVIMIENTOSUBPRODUCTO, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_mOVIMIENTOSUBPRODUCTO != null)
                    {
                        _mOVIMIENTOSUBPRODUCTO.CollectionChanged -= FixupMOVIMIENTOSUBPRODUCTO;
                    }
                    _mOVIMIENTOSUBPRODUCTO = value;
                    if (_mOVIMIENTOSUBPRODUCTO != null)
                    {
                        _mOVIMIENTOSUBPRODUCTO.CollectionChanged += FixupMOVIMIENTOSUBPRODUCTO;
                    }
                    OnNavigationPropertyChanged("MOVIMIENTOSUBPRODUCTO");
                }
            }
        }
        private TrackableCollection<MOVIMIENTOSUBPRODUCTO> _mOVIMIENTOSUBPRODUCTO;
    
        [DataMember]
        public PRODUCTO PRODUCTO
        {
            get { return _pRODUCTO; }
            set
            {
                if (!ReferenceEquals(_pRODUCTO, value))
                {
                    var previousValue = _pRODUCTO;
                    _pRODUCTO = value;
                    FixupPRODUCTO(previousValue);
                    OnNavigationPropertyChanged("PRODUCTO");
                }
            }
        }
        private PRODUCTO _pRODUCTO;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            GRUPOTERAPEUTICO = null;
            MOVIMIENTOSUBPRODUCTO.Clear();
            PRODUCTO = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupGRUPOTERAPEUTICO(GRUPOTERAPEUTICO previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.SUBPRODUCTO.Contains(this))
            {
                previousValue.SUBPRODUCTO.Remove(this);
            }
    
            if (GRUPOTERAPEUTICO != null)
            {
                if (!GRUPOTERAPEUTICO.SUBPRODUCTO.Contains(this))
                {
                    GRUPOTERAPEUTICO.SUBPRODUCTO.Add(this);
                }
    
                IDGRUPO = GRUPOTERAPEUTICO.IDGRUPO;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("GRUPOTERAPEUTICO")
                    && (ChangeTracker.OriginalValues["GRUPOTERAPEUTICO"] == GRUPOTERAPEUTICO))
                {
                    ChangeTracker.OriginalValues.Remove("GRUPOTERAPEUTICO");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("GRUPOTERAPEUTICO", previousValue);
                }
                if (GRUPOTERAPEUTICO != null && !GRUPOTERAPEUTICO.ChangeTracker.ChangeTrackingEnabled)
                {
                    GRUPOTERAPEUTICO.StartTracking();
                }
            }
        }
    
        private void FixupPRODUCTO(PRODUCTO previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.SUBPRODUCTO.Contains(this))
            {
                previousValue.SUBPRODUCTO.Remove(this);
            }
    
            if (PRODUCTO != null)
            {
                if (!PRODUCTO.SUBPRODUCTO.Contains(this))
                {
                    PRODUCTO.SUBPRODUCTO.Add(this);
                }
    
                IDPRODUCTO = PRODUCTO.IDPRODUCTO;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("PRODUCTO")
                    && (ChangeTracker.OriginalValues["PRODUCTO"] == PRODUCTO))
                {
                    ChangeTracker.OriginalValues.Remove("PRODUCTO");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("PRODUCTO", previousValue);
                }
                if (PRODUCTO != null && !PRODUCTO.ChangeTracker.ChangeTrackingEnabled)
                {
                    PRODUCTO.StartTracking();
                }
            }
        }
    
        private void FixupMOVIMIENTOSUBPRODUCTO(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (MOVIMIENTOSUBPRODUCTO item in e.NewItems)
                {
                    item.SUBPRODUCTO = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("MOVIMIENTOSUBPRODUCTO", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MOVIMIENTOSUBPRODUCTO item in e.OldItems)
                {
                    if (ReferenceEquals(item.SUBPRODUCTO, this))
                    {
                        item.SUBPRODUCTO = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("MOVIMIENTOSUBPRODUCTO", item);
                    }
                }
            }
        }

        #endregion
    }
}
