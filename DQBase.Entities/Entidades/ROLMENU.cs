//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace DQBase.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(MENU))]
    [KnownType(typeof(ROL))]
    public partial class ROLMENU: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public System.Guid IDROLMENU
        {
            get { return _iDROLMENU; }
            set
            {
                if (_iDROLMENU != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IDROLMENU' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _iDROLMENU = value;
                    OnPropertyChanged("IDROLMENU");
                }
            }
        }
        private System.Guid _iDROLMENU;
    
        [DataMember]
        public System.Guid IDROL
        {
            get { return _iDROL; }
            set
            {
                if (_iDROL != value)
                {
                    ChangeTracker.RecordOriginalValue("IDROL", _iDROL);
                    if (!IsDeserializing)
                    {
                        if (ROL != null && ROL.IDROL != value)
                        {
                            ROL = null;
                        }
                    }
                    _iDROL = value;
                    OnPropertyChanged("IDROL");
                }
            }
        }
        private System.Guid _iDROL;
    
        [DataMember]
        public System.Guid IDMENU
        {
            get { return _iDMENU; }
            set
            {
                if (_iDMENU != value)
                {
                    ChangeTracker.RecordOriginalValue("IDMENU", _iDMENU);
                    if (!IsDeserializing)
                    {
                        if (MENU != null && MENU.IDMENU != value)
                        {
                            MENU = null;
                        }
                    }
                    _iDMENU = value;
                    OnPropertyChanged("IDMENU");
                }
            }
        }
        private System.Guid _iDMENU;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public MENU MENU
        {
            get { return _mENU; }
            set
            {
                if (!ReferenceEquals(_mENU, value))
                {
                    var previousValue = _mENU;
                    _mENU = value;
                    FixupMENU(previousValue);
                    OnNavigationPropertyChanged("MENU");
                }
            }
        }
        private MENU _mENU;
    
        [DataMember]
        public ROL ROL
        {
            get { return _rOL; }
            set
            {
                if (!ReferenceEquals(_rOL, value))
                {
                    var previousValue = _rOL;
                    _rOL = value;
                    FixupROL(previousValue);
                    OnNavigationPropertyChanged("ROL");
                }
            }
        }
        private ROL _rOL;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            MENU = null;
            ROL = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupMENU(MENU previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ROLMENU.Contains(this))
            {
                previousValue.ROLMENU.Remove(this);
            }
    
            if (MENU != null)
            {
                if (!MENU.ROLMENU.Contains(this))
                {
                    MENU.ROLMENU.Add(this);
                }
    
                IDMENU = MENU.IDMENU;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("MENU")
                    && (ChangeTracker.OriginalValues["MENU"] == MENU))
                {
                    ChangeTracker.OriginalValues.Remove("MENU");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("MENU", previousValue);
                }
                if (MENU != null && !MENU.ChangeTracker.ChangeTrackingEnabled)
                {
                    MENU.StartTracking();
                }
            }
        }
    
        private void FixupROL(ROL previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ROLMENU.Contains(this))
            {
                previousValue.ROLMENU.Remove(this);
            }
    
            if (ROL != null)
            {
                if (!ROL.ROLMENU.Contains(this))
                {
                    ROL.ROLMENU.Add(this);
                }
    
                IDROL = ROL.IDROL;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ROL")
                    && (ChangeTracker.OriginalValues["ROL"] == ROL))
                {
                    ChangeTracker.OriginalValues.Remove("ROL");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ROL", previousValue);
                }
                if (ROL != null && !ROL.ChangeTracker.ChangeTrackingEnabled)
                {
                    ROL.StartTracking();
                }
            }
        }

        #endregion
    }
}
